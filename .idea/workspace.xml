<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="5a3096ea-6e57-4819-9c1d-d93f884f785a" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/frontend/src/pages/Checkout/Checkout.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/pages/Checkout/Checkout.tsx" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/frontend/src/redux/Slices/CheckoutSlice.ts" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/redux/Slices/CheckoutSlice.ts" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2EBzQVhfCGYzd22uBowvK5Jg2oc" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "TF_FMT": "false",
    "WebServerToolWindowFactoryState": "false",
    "last_opened_file_path": "/Users/yast/workspace/training/pizza-time/backend/src",
    "node.js.detected.package.eslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "nodejs.jest.jest_package": "/Users/yast/workspace/training/pizza-time/frontend/node_modules/react-scripts",
    "nodejs_package_manager_path": "npm",
    "prettierjs.PrettierConfiguration.Package": "/Users/yast/workspace/training/pizza-time/frontend/node_modules/prettier",
    "settings.editor.selected.configurable": "settings.javascript.prettier",
    "ts.external.directory.path": "/Users/yast/workspace/training/pizza-time/frontend/node_modules/typescript/lib"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/backend/src" />
      <recent name="$PROJECT_DIR$/backend" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/backend/src/models" />
      <recent name="$PROJECT_DIR$/frontend" />
    </key>
  </component>
  <component name="RunManager" selected="Jest.PastOrders">
    <configuration name="Checkout.should redirect to past orders page and show success toast after successfully placed order" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <node-options value="" />
      <jest-package value="$PROJECT_DIR$/frontend/node_modules/react-scripts" />
      <working-dir value="$PROJECT_DIR$/frontend" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/frontend/src/pages/Checkout/Checkout.spec.tsx" />
      <test-names>
        <test-name value="Checkout" />
        <test-name value="should redirect to past orders page and show success toast after successfully placed order" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="PastOrders" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <node-options value="" />
      <jest-package value="$PROJECT_DIR$/frontend/node_modules/react-scripts" />
      <working-dir value="$PROJECT_DIR$/frontend" />
      <envs />
      <scope-kind value="SUITE" />
      <test-file value="$PROJECT_DIR$/frontend/src/pages/PastOrders/PastOrders.spec.tsx" />
      <test-names>
        <test-name value="PastOrders" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="PastOrders.should show error toast if failed to fetch past orders" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <node-options value="" />
      <jest-package value="$PROJECT_DIR$/frontend/node_modules/react-scripts" />
      <working-dir value="$PROJECT_DIR$/frontend" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/frontend/src/pages/PastOrders/PastOrders.spec.tsx" />
      <test-names>
        <test-name value="PastOrders" />
        <test-name value="should show error toast if failed to fetch past orders" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="PastOrders.should show message if no past orders present" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <node-options value="" />
      <jest-package value="$PROJECT_DIR$/frontend/node_modules/react-scripts" />
      <working-dir value="$PROJECT_DIR$/frontend" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/frontend/src/pages/PastOrders/PastOrders.spec.tsx" />
      <test-names>
        <test-name value="PastOrders" />
        <test-name value="should show message if no past orders present" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="PastOrders.should show past orders" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <node-options value="" />
      <jest-package value="$PROJECT_DIR$/frontend/node_modules/react-scripts" />
      <working-dir value="$PROJECT_DIR$/frontend" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/frontend/src/pages/PastOrders/PastOrders.spec.tsx" />
      <test-names>
        <test-name value="PastOrders" />
        <test-name value="should show past orders" />
      </test-names>
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Jest.PastOrders" />
        <item itemvalue="Jest.PastOrders.should show error toast if failed to fetch past orders" />
        <item itemvalue="Jest.PastOrders.should show message if no past orders present" />
        <item itemvalue="Jest.PastOrders.should show past orders" />
        <item itemvalue="Jest.Checkout.should redirect to past orders page and show success toast after successfully placed order" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="5a3096ea-6e57-4819-9c1d-d93f884f785a" name="Changes" comment="" />
      <created>1662083751373</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1662083751373</updated>
      <workItem from="1662083755358" duration="21287000" />
    </task>
    <task id="LOCAL-00001" summary="Fetch past orders in orders page using an async thunk">
      <created>1662086904711</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1662086904711</updated>
    </task>
    <task id="LOCAL-00002" summary="Move frontend code into a dedicated frontend directory as a backend will follow for a minimal dummy backend">
      <created>1662087614762</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1662087614762</updated>
    </task>
    <task id="LOCAL-00003" summary="Introduce simple node express backend server that returns mock responses">
      <created>1662096983911</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1662096983911</updated>
    </task>
    <task id="LOCAL-00004" summary="Send requests to backend instead of mocking on API layer">
      <created>1662099425687</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1662099425687</updated>
    </task>
    <task id="LOCAL-00005" summary="Use msw library to mock network requests for frontend tests and enable integration testing of components using a real redux store">
      <created>1662179709094</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1662179709094</updated>
    </task>
    <task id="LOCAL-00006" summary="Show loading spinner and error message when fetching past orders">
      <created>1662181497639</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1662181497639</updated>
    </task>
    <option name="localTasksCounter" value="7" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Fetch past orders in orders page using an async thunk" />
    <MESSAGE value="Move frontend code into a dedicated frontend directory as a backend will follow for a minimal dummy backend" />
    <MESSAGE value="Introduce simple node express backend server that returns mock responses" />
    <MESSAGE value="Send requests to backend instead of mocking on API layer" />
    <MESSAGE value="Use msw library to mock network requests for frontend tests and enable integration testing of components using a real redux store" />
    <MESSAGE value="Show loading spinner and error message when fetching past orders" />
    <option name="LAST_COMMIT_MESSAGE" value="Show loading spinner and error message when fetching past orders" />
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>