name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Generate order-service API client code
        run: ./openapi-codegen.sh

      - name: Install frontend dependencies
        run: | 
          cd frontend
          npm install

      - name: Run frontend unit and integration tests
        run: |
          cd frontend
          CI=true npm test

      - name: Run frontend e2e tests
        run: |
          cd frontend
          npm run build
          npm run serve
          npm run cypress:run -- --config baseUrl=http://localhost:8000

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - uses: actions/checkout@v3

      - name: Deploy dockerized backend to Heroku
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          dockerfile_directory: ./order-service

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - uses: actions/checkout@v3

      - name: Generate order-service API client code
        run: ./openapi-codegen.sh

      # Vercel only knows the following environments: development | preview | production
      - name: Deploy frontend to Vercel
        run: |
          cd frontend
          npx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          npx vercel build --token=${{ secrets.VERCEL_TOKEN }}
          npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  # TODO: probably need to trigger warm up request to backend and wait for readiness before running environment tests
  # TODO: run environment smoke e2e tests against test environment